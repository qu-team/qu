// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  window.drawTriangle = (function(_this) {
    return function() {
      var canvas, coord, fragCode, fragShader, gl, indexBuf, indices, shaderProgram, vertBuf, vertCode, vertShader, vertices;
      canvas = document.getElementById('gameCanvas');
      gl = canvas.getContext('experimental-webgl');
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      vertices = [-0.5, +0.5, 0, -0.5, -0.5, 0, +0.5, -0.5, 0];
      indices = [0, 1, 2];
      vertBuf = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, vertBuf);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      gl.bindBuffer(gl.ARRAY_BUFFER, null);
      indexBuf = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuf);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
      vertCode = "attribute vec3 coordinates;\n\nvoid main() {\n	gl_Position = vec4(coordinates, 1.0);\n}";
      vertShader = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(vertShader, vertCode);
      gl.compileShader(vertShader);
      fragCode = "void main(void) {\n	'gl_FragColor = vec4(0.0, 0.0, 0.0, 0.1);\n}";
      fragShader = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(fragShader, fragCode);
      gl.compileShader(fragShader);
      shaderProgram = gl.createProgram();
      gl.attachShader(shaderProgram, vertShader);
      gl.attachShader(shaderProgram, fragShader);
      gl.linkProgram(shaderProgram);
      gl.useProgram(shaderProgram);
      gl.bindBuffer(gl.ARRAY_BUFFER, vertBuf);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuf);
      coord = gl.getAttribLocation(shaderProgram, "coordinates");
      gl.vertexAttribPointer(coord, 3, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(coord);
      gl.clearColor(0.5, 0.5, 0.5, 0.9);
      gl.enable(gl.DEPTH_TEST);
      gl.clear(gl.COLOR_BUFFER_BIT);
      gl.viewport(0, 0, canvas.width, canvas.height);
      return gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);
    };
  })(this);

}).call(this);
